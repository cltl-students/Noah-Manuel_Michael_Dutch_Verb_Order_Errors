# Noah-Manuel Michael
# Created: 31.05.2023
# Last updated: 11.06.2023
# Get a more abstract version of the trees generated by the discodop-parser
# This script was pair-programmed with ChatGPT (v4)
# https://www.nltk.org/_modules/nltk/tree.html

import pandas as pd
import re
from nltk import Tree


def contains_verb(tree):
    """
    Recursive function to check if a tree or subtree contains a verb.
    :param tree: a tree parsed with nltk Tree
    :return: bool
    """
    if tree.label() == 'ww':  # check if the current subtree is a 'ww'
        return True
    else:  # check if any of the subtrees below the current subtree contain 'ww'
        return any(contains_verb(subtree) for subtree in tree if isinstance(subtree, Tree))


def summarize_tree(tree):
    """
    Recursive function to summarize a tree by replacing non-verb containing subtrees with their root node.
    :param tree: a tree parsed with nltk Tree
    :return: None
    """
    for i, subtree in enumerate(tree):
        if isinstance(subtree, Tree):
            if not contains_verb(subtree):  # if no subtrees of the current root node contain 'ww'
                tree[i] = Tree(subtree.label(), [])  # collapse the tree into its root node with no content
            else:
                summarize_tree(subtree)


def remove_leaves(tree):
    """
    Recursive function to traverse the tree and remove leaf nodes, which in this case are position indicators.
    :param tree: a tree parsed with nltk Tree
    :return: None
    """
    for i, subtree in enumerate(tree):
        if isinstance(subtree, Tree):
            remove_leaves(subtree)
        elif isinstance(subtree, str):  # If leaf, remove it
            tree[i] = ""


def do_simplification(tree):
    """
    Execute the functions necessary to simplify the tree structures.
    :param tree: a tree parsed with nltk Tree
    :return: None
    """
    summarize_tree(tree)
    remove_leaves(tree)
    # remove_let(tree)


def simplify_trees():
    """
    Run the script to simplify the stree structures obtained from the disco-dop parser.
    :return: None
    """
    for split in ['test', 'train']:
        for shuffle in ['C', 'AR', 'VR', 'VT']:
            df = pd.read_csv(f'Data/Trees/{split}_{shuffle}.tsv', encoding='utf-8', sep='\t', header=0)
            # remove verbs in path for all random shuffles
            simplified_trees = []

            for tree_string in df['tree']:
                tree = Tree.fromstring(tree_string)
                do_simplification(tree)
                tree_str = re.sub(r'\s+', ' ', str(tree))
                tree_str = re.sub(r' \)', ')', tree_str)
                simplified_trees.append(tree_str)

            df['simple_tree'] = simplified_trees
            df.to_csv(f'Data/Trees/{split}_{shuffle}.tsv', encoding='utf-8', sep='\t', index=False)

            print(f'{split.title()} data\'s {shuffle} sentence trees simplified.')


if __name__ == '__main__':
    simplify_trees()
